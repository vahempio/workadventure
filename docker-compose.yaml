version: "3"
services:
  traefik:
    image: traefik:v2.3
    restart: unless-stopped
    networks:
      - t_nwk
    command:
      - "--configFile=/config/traefik_static.yml"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik_files/letsencrypt:/letsencrypt:rw
      - ./traefik_files/config:/config/:ro
      - ./traefik_files/.htpasswd:/.htpasswd:ro
    labels:
      - "traefik.enable=true"
      # Authentications
      - "traefik.http.middlewares.mw-auth-htpasswd.basicauth.usersfile=/.htpasswd"
      - "traefik.http.middlewares.mw-auth-htpasswd.basicauth.realm=${ROOT_DOMAIN}"
      # Dashboard
      - "traefik.http.routers.traefik-router.rule=Host(`traefik.${ROOT_DOMAIN}`)"
      - "traefik.http.routers.traefik-router.entrypoints=websecure"
      - "traefik.http.routers.traefik-router.tls=true"
#      - "traefik.http.routers.traefik-router.tls.options=modern@file"
      - "traefik.http.routers.traefik-router.tls.certresolver=letsenc"
      - "traefik.http.routers.traefik-router.service=api@internal"
      - "traefik.http.routers.traefik-router.middlewares=mw-auth-htpasswd@docker"
      # HTTP -> HTTPS redirection
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.https-r.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.https-r.entrypoints=web"
      - "traefik.http.routers.https-r.middlewares=redirect-to-https"

  front:
    image: thecodingmachine/nodejs:14
    restart: unless-stopped
    networks:
      - t_nwk
      - backend
    environment:
      DEBUG_MODE: "$DEBUG_MODE"
      JITSI_URL: $JITSI_URL
      JITSI_PRIVATE_MODE: "$JITSI_PRIVATE_MODE"
      HOST: "0.0.0.0"
      NODE_ENV: development
      API_URL: pusher.${ROOT_DOMAIN}
      UPLOADER_URL: uploader.${ROOT_DOMAIN}
      ADMIN_URL: admin.${ROOT_DOMAIN}
      STARTUP_COMMAND_1: ./templater.sh
      STARTUP_COMMAND_2: yarn install
      STUN_SERVER: "stun:stun.l.google.com:19302"
      TURN_SERVER: "turn:coturn.${ROOT_DOMAIN}:3478,turns:coturn.${ROOT_DOMAIN}:5349"
      # Use TURN_USER/TURN_PASSWORD if your Coturn server is secured via hard coded credentials.
      # Advice: you should instead use Coturn REST API along the TURN_STATIC_AUTH_SECRET in the Back container
      TURN_USER: ""
      TURN_PASSWORD: ""
      START_ROOM_URL: "$START_ROOM_URL"
    command: yarn run start
    volumes:
      - ./front:/usr/src/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.front.loadbalancer.server.port=8080"
      - "traefik.http.routers.front-ssl.rule=Host(`play.${ROOT_DOMAIN}`)"
      - "traefik.http.routers.front-ssl.entryPoints=websecure"
      - "traefik.http.routers.front-ssl.tls=true"
      - "traefik.http.routers.front-ssl.service=front"
      - "traefik.http.routers.front-ssl.tls.certresolver=letsenc"

  pusher:
    image: thecodingmachine/nodejs:12
    restart: unless-stopped
    networks:
      - t_nwk
      - backend
    command: yarn dev
    #command: yarn run prod
    #command: yarn run profile
    environment:
      DEBUG: "*"
      STARTUP_COMMAND_1: yarn install
      SECRET_JITSI_KEY: "$SECRET_JITSI_KEY"
      SECRET_KEY: yourSecretKey
      ADMIN_API_TOKEN: "$ADMIN_API_TOKEN"
      API_URL: back:50051
      JITSI_URL: $JITSI_URL
      JITSI_ISS: $JITSI_ISS
    volumes:
      - ./pusher:/usr/src/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pusher.rule=Host(`pusher.${ROOT_DOMAIN}`)"
      - "traefik.http.services.pusher.loadbalancer.server.port=8080"
      - "traefik.http.routers.pusher-ssl.rule=Host(`pusher.${ROOT_DOMAIN}`)"
      - "traefik.http.routers.pusher-ssl.entryPoints=websecure"
      - "traefik.http.routers.pusher-ssl.tls=true"
      - "traefik.http.routers.pusher-ssl.service=pusher"
      - "traefik.http.routers.pusher-ssl.tls.certresolver=letsenc"

  maps:
    image: thecodingmachine/nodejs:12-apache
    restart: unless-stopped
    networks:
      - t_nwk
      - backend
    environment:
      DEBUG_MODE: "$DEBUG_MODE"
      HOST: "0.0.0.0"
      NODE_ENV: development
      #APACHE_DOCUMENT_ROOT: dist/
      #APACHE_EXTENSIONS: headers
      #APACHE_EXTENSION_HEADERS: 1
      STARTUP_COMMAND_0: sudo a2enmod headers
      STARTUP_COMMAND_1: yarn install
      STARTUP_COMMAND_2: yarn run dev &
    volumes:
      - ./maps:/var/www/html
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maps.rule=Host(`maps.${ROOT_DOMAIN}`)"
#      - "traefik.http.routers.maps.entryPoints=web"
      - "traefik.http.services.maps.loadbalancer.server.port=80"
      - "traefik.http.routers.maps-ssl.rule=Host(`maps.${ROOT_DOMAIN}`)"
      - "traefik.http.routers.maps-ssl.entryPoints=websecure"
      - "traefik.http.routers.maps-ssl.tls=true"
      - "traefik.http.routers.maps-ssl.service=maps"
      - "traefik.http.routers.maps-ssl.tls.certresolver=letsenc"

  back:
    image: thecodingmachine/nodejs:12
    restart: unless-stopped
    networks:
      - t_nwk
      - backend
    command: yarn dev
    #command: yarn run profile
    environment:
      DEBUG: "*"
      STARTUP_COMMAND_1: yarn install
      SECRET_KEY: yourSecretKey
      SECRET_JITSI_KEY: "$SECRET_JITSI_KEY"
      ALLOW_ARTILLERY: "true"
      ADMIN_API_TOKEN: "$ADMIN_API_TOKEN"
      JITSI_URL: $JITSI_URL
      JITSI_ISS: $JITSI_ISS
      TURN_STATIC_AUTH_SECRET: ${TURN_AUTH_SECRET}
    volumes:
      - ./back:/usr/src/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.back.rule=Host(`api.${ROOT_DOMAIN}`)"
#      - "traefik.http.routers.back.entryPoints=web"
      - "traefik.http.services.back.loadbalancer.server.port=8080"
      - "traefik.http.routers.back-ssl.rule=Host(`api.${ROOT_DOMAIN}`)"
      - "traefik.http.routers.back-ssl.entryPoints=websecure"
      - "traefik.http.routers.back-ssl.tls=true"
      - "traefik.http.routers.back-ssl.service=back"
      - "traefik.http.routers.back-ssl.tls.certresolver=letsenc"

  uploader:
    image: thecodingmachine/nodejs:12
    restart: unless-stopped
    networks:
      - t_nwk
      - backend
    command: yarn dev
    #command: yarn run profile
    environment:
      DEBUG: "*"
      STARTUP_COMMAND_1: yarn install
    volumes:
      - ./uploader:/usr/src/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uploader.rule=Host(`uploader.${ROOT_DOMAIN}`)"
#      - "traefik.http.routers.uploader.entryPoints=web"
      - "traefik.http.services.uploader.loadbalancer.server.port=8080"
      - "traefik.http.routers.uploader-ssl.rule=Host(`uploader.${ROOT_DOMAIN}`)"
      - "traefik.http.routers.uploader-ssl.entryPoints=websecure"
      - "traefik.http.routers.uploader-ssl.tls=true"
      - "traefik.http.routers.uploader-ssl.service=uploader"
      - "traefik.http.routers.uploader-ssl.tls.certresolver=letsenc"

  messages:
    #image: thecodingmachine/nodejs:14
    restart: unless-stopped
    image: thecodingmachine/workadventure-back-base:latest
    networks:
      - backend
    environment:
      #STARTUP_COMMAND_0: sudo apt-get install -y inotify-tools
      STARTUP_COMMAND_1: yarn install
      STARTUP_COMMAND_2: yarn run proto:watch
    volumes:
      - ./messages:/usr/src/app
      - ./back:/usr/src/back
      - ./front:/usr/src/front
      - ./pusher:/usr/src/pusher
    labels:
      - "traefik.enable=false"

  coturn:
    image: coturn/coturn:4.5.2
    restart: unless-stopped
    volumes:
      - ./turn_cert:/cert:ro
    ports:
      - "3478:3478/udp"
      - "5349:5349/udp"
    command:
      - turnserver
      #- -c=/etc/coturn/turnserver.conf
      - --log-file=stdout
      - --external-ip=${EXTERNAL_IP}
      - --listening-port=3478
      - --min-port=10000
      - --max-port=10200
      - --tls-listening-port=5349
      - --listening-ip=0.0.0.0
      - --realm=coturn.${ROOT_DOMAIN}
      - --server-name=coturn.${ROOT_DOMAIN}
      - --no-cli
      #- --lt-cred-mech
      # Enable Coturn "REST API" to validate temporary passwords.
      - --use-auth-secret
      - --static-auth-secret=${TURN_AUTH_SECRET}
      #- --userdb=/var/lib/turn/turndb
      # use real-valid certificate/privatekey files
      - --cert=/cert/fullchain.pem
      - --pkey=/cert/privkey.pem
    labels:
      - "traefik.enable=false"
    #network_mode: host

networks:
  backend:
    driver: bridge
  t_nwk:
    external:
      name: traefik_network
